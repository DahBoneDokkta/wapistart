// <auto-generated />
using System;
using DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbContext.Migrations.SqlServerDbContext
{
    [DbContext(typeof(csMainDbContext.SqlServerDbContext))]
    [Migration("20241025181428_miInitial")]
    partial class miInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.csAttraction", b =>
                {
                    b.Property<Guid>("AttractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AttractionId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("csAttraction");

                    b.HasDiscriminator().HasValue("csAttraction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.csCity", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("csCity");

                    b.HasDiscriminator().HasValue("csCity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.csComment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttractionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("csCityCityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId");

                    b.HasIndex("AttractionId");

                    b.HasIndex("UserId");

                    b.HasIndex("csCityCityId");

                    b.ToTable("csComment");

                    b.HasDiscriminator().HasValue("csComment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.csCountries", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("CountryId");

                    b.ToTable("csCountries");

                    b.HasDiscriminator().HasValue("csCountries");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.csUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("csUser");

                    b.HasDiscriminator().HasValue("csUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DbModels.csAttractionDbM", b =>
                {
                    b.HasBaseType("Models.csAttraction");

                    b.Property<Guid?>("CityDbMCityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryDbMCountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsTestData")
                        .HasColumnType("bit");

                    b.HasIndex("CityDbMCityId");

                    b.HasIndex("CountryDbMCountryId");

                    b.HasDiscriminator().HasValue("csAttractionDbM");
                });

            modelBuilder.Entity("DbModels.csCityDbM", b =>
                {
                    b.HasBaseType("Models.csCity");

                    b.Property<Guid?>("CountryDbMCountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsTestData")
                        .HasColumnType("bit");

                    b.HasIndex("CountryDbMCountryId");

                    b.HasDiscriminator().HasValue("csCityDbM");
                });

            modelBuilder.Entity("DbModels.csCommentDbM", b =>
                {
                    b.HasBaseType("Models.csComment");

                    b.Property<Guid?>("AttractionDbMAttractionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsTestData")
                        .HasColumnType("bit");

                    b.Property<Guid?>("csUserDbMUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AttractionDbMAttractionId");

                    b.HasIndex("csUserDbMUserId");

                    b.HasDiscriminator().HasValue("csCommentDbM");
                });

            modelBuilder.Entity("DbModels.csCountryDbM", b =>
                {
                    b.HasBaseType("Models.csCountries");

                    b.Property<bool>("IsTestData")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("csCountryDbM");
                });

            modelBuilder.Entity("DbModels.csUserDbM", b =>
                {
                    b.HasBaseType("Models.csUser");

                    b.Property<bool>("IsTestData")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("csUserDbM");
                });

            modelBuilder.Entity("Models.csAttraction", b =>
                {
                    b.HasOne("Models.csCity", "City")
                        .WithMany("Attractions")
                        .HasForeignKey("CityId");

                    b.HasOne("Models.csCountries", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Models.csCity", b =>
                {
                    b.HasOne("Models.csCountries", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Models.csComment", b =>
                {
                    b.HasOne("Models.csAttraction", "Attraction")
                        .WithMany("CommentText")
                        .HasForeignKey("AttractionId");

                    b.HasOne("Models.csUser", "User")
                        .WithMany("CommentText")
                        .HasForeignKey("UserId");

                    b.HasOne("Models.csCity", null)
                        .WithMany("CommentText")
                        .HasForeignKey("csCityCityId");

                    b.Navigation("Attraction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbModels.csAttractionDbM", b =>
                {
                    b.HasOne("DbModels.csCityDbM", "CityDbM")
                        .WithMany()
                        .HasForeignKey("CityDbMCityId");

                    b.HasOne("DbModels.csCountryDbM", "CountryDbM")
                        .WithMany()
                        .HasForeignKey("CountryDbMCountryId");

                    b.Navigation("CityDbM");

                    b.Navigation("CountryDbM");
                });

            modelBuilder.Entity("DbModels.csCityDbM", b =>
                {
                    b.HasOne("DbModels.csCountryDbM", "CountryDbM")
                        .WithMany("CitiesDbM")
                        .HasForeignKey("CountryDbMCountryId");

                    b.Navigation("CountryDbM");
                });

            modelBuilder.Entity("DbModels.csCommentDbM", b =>
                {
                    b.HasOne("DbModels.csAttractionDbM", "AttractionDbM")
                        .WithMany("CommentDbM")
                        .HasForeignKey("AttractionDbMAttractionId");

                    b.HasOne("DbModels.csUserDbM", null)
                        .WithMany("Comments")
                        .HasForeignKey("csUserDbMUserId");

                    b.Navigation("AttractionDbM");
                });

            modelBuilder.Entity("Models.csAttraction", b =>
                {
                    b.Navigation("CommentText");
                });

            modelBuilder.Entity("Models.csCity", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("CommentText");
                });

            modelBuilder.Entity("Models.csCountries", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Models.csUser", b =>
                {
                    b.Navigation("CommentText");
                });

            modelBuilder.Entity("DbModels.csAttractionDbM", b =>
                {
                    b.Navigation("CommentDbM");
                });

            modelBuilder.Entity("DbModels.csCountryDbM", b =>
                {
                    b.Navigation("CitiesDbM");
                });

            modelBuilder.Entity("DbModels.csUserDbM", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
